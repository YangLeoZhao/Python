import pdb
import numpy
import math
import random
import heapq as heap
from collections import deque

#variable declaration
N = 20 			#N: the number of computers connected to the LAN (variable)
A = 5 			#Data packets arrive at the MAC layer following a Poisson process with an average arrival rate of A packets /second (variable)
W = 1000000		#The speed of the LAN (fixed)
L = 1500*8   	#Packet length (fixed)
global P
P = 1 			#Persistence parameter for P-persistent CSMA protocols
timeFactor = 1000 #Time scale 
simTime =  5#in seconds
packetperSecond = 0
totalNumberOfPacket = 0
collisionCount = 0
kMax = 10
randomBackoffperiod = 0

packetThroughPut = 0
AggregateCollisionCount = 0
AggregatePacketCount =0

lastPacketTime = 0
currentPacket = 0
lastSender = 0
currentSender = 0


# Presistency = {}
LANUsers = {}
packetHeap = []
collisionList = []

def poissonDistribution():
	packetperSecond = float (numpy.random.poisson(A))
	if (packetperSecond == 0):
		return 0
	else:
		return 1/packetperSecond*timeFactor

class users:
	def __init__(self, userID, lastPacket= 0):
		self.userID = userID
		self.queue = deque ()
		self.lastPacket = lastPacket
		self.backoffCounter = 0
		self.medium = 0
		self.mediumCountdown = 96/W*timeFactor

class packet:
	def __init__ (self, packetTime, user):
		self.packetTime = packetTime
		self.user = user

	def __lt__ (self, other):		
		#pdb.set_trace ()
		return self.packetTime < other.packetTime

	def __repr__(self):
		return str(self.packetTime) + " " + str(self.user)

#Resolving collisions
def resolveCollision (collisions, counter):
	for x in range (0, counter+1):
		if(LANUsers[collisions[0].user].backoffCounter < kMax):
			LANUsers[collisions[0].user].backoffCounter += 1
			randomBackoffperiod = random.uniform(0, pow(2,LANUsers[collisions[0].user].backoffCounter)-1)*timeFactor*512/W
			delayPacket = packet (collisions[0].packetTime + randomBackoffperiod, LANUsers[collisions[0].user].userID)
			#print "Random backoff for "+ str(LANUsers[collisions[0].user].userID) +" "+ str(randomBackoffperiod) + " new packet time " + str(delayPacket.packetTime)
			heap.heappush(packetHeap, delayPacket)
			heap.heapify(packetHeap)
		else:
			print "User: {0} has failed to send a packet at {1}".format (collisions[0].user, collisions[0].packetTime)
		collisions.pop(0)


#Initializing the users
for x in range (0, N):
	LANUsers[x] = users (x)
print "User generation done."

counter = 0
#Calculating when the packets from upper layers will arrive
maxPacketPerUser = 0
condition = len(LANUsers)
for x in range (0, len(LANUsers)):
	condition = len(LANUsers)
	while LANUsers[x].lastPacket < (simTime * timeFactor):
		timeBuffer = poissonDistribution()
		if (timeBuffer != 0):
			LANUsers[x].lastPacket += timeBuffer
			if (LANUsers[x].lastPacket < (simTime * timeFactor)):
				insertPacket = packet (LANUsers[x].lastPacket, x)
				heap.heappush(packetHeap, insertPacket)
				heap.heapify(packetHeap)
				totalNumberOfPacket +=1
				counter +=1
				#print insertPacket.packetTime, insertPacket.user
	counter = 0
AggregatePacketCount += totalNumberOfPacket
print "Packet generation done."
print "Analyzing..."
#print str(packetHeap)

#Initialized
medium = 0
# Calculating possible collisions
while (totalNumberOfPacket > 0):
	currentPacket = heap.heappop(packetHeap)
	totalNumberOfPacket -= 1

	#Non-Persistent CSMA/CD
	if (P == 1):
		if (abs(currentPacket.packetTime - lastPacketTime) > (abs(currentSender - lastSender)*10/(2*pow(10,8))) and abs(currentPacket.packetTime - lastPacketTime) < (L*timeFactor/W+ 96*timeFactor/W + abs(currentSender - lastSender)*10/(2*pow(10,8)))):
			print (str(currentPacket.packetTime) + " " + str(currentPacket.user) + " " + str(lastPacketTime) + " " + str(lastSender))
			currentPacket.packetTime += random.uniform(0, pow(2,LANUsers[currentPacket.user].medium)-1)*timeFactor*512/W
			LANUsers[currentPacket.user].medium +=1
			heap.heappush(packetHeap, currentPacket)
		else: 
			#A group of collisions
			#print " "+str(currentPacket.packetTime) + " " + str(currentPacket.user)
			if (abs(currentPacket.packetTime - lastPacketTime) <= (L*timeFactor/W+ 96*timeFactor/W + abs(currentSender - lastSender)*10/(2*pow(10,8)))):
				#if the conflicting packets are between the same user then delay the 2nd packet by the minimal busy time
				if(currentPacket.user == lastSender):
					delayCurrentPacket = packet (lastPacketTime + (L*timeFactor/W+ 96*timeFactor/W + abs(currentSender - lastSender)*10/(2*pow(10,8)))+1, currentPacket.user)
					heap.heappush(packetHeap, delayCurrentPacket)
					heap.heapify(packetHeap)
				#if the conflicting packets are between different users
				else:
					if(collisionCount == 0):
						previousPacket = packet (lastPacketTime, lastSender)
						collisionList.append(previousPacket)
					collisionList.append(currentPacket)
					collisionCount += 1
				#print (str(currentPacket.packetTime) + " " + str(currentPacket.user) + " " + str(lastPacketTime) + " " + str(lastSender))
			elif ((abs(currentPacket.packetTime - lastPacketTime) > (L*timeFactor/W+ 96*timeFactor/W + abs(currentSender - lastSender)*10/(2*pow(10,8)))) and collisionCount > 0):
				#print ("Collision occured " + str(collisionCount))
				resolveCollision(collisionList, collisionCount)
				AggregateCollisionCount += collisionCount
				collisionCount = 0
			elif((abs(currentPacket.packetTime - lastPacketTime) > (L*timeFactor/W+ 96*timeFactor/W + abs(currentSender - lastSender)*10/(2*pow(10,8))))):
				LANUsers[currentPacket.user].backoffCounter = 0
				LANUsers[currentPacket.user].medium = 0
				packetThroughPut +=1
			if (currentPacket.user != lastSender):
				lastPacketTime = currentPacket.packetTime
				lastSender = currentPacket.user

print "Packet Throughput: "+str(packetThroughPut) + " Collision#: " + str(AggregateCollisionCount) + " Total packet created: " + str (AggregatePacketCount)

with open ("data.txt", "a") as testfile:
	testfile.write (str(packetThroughPut)+" "+str(AggregateCollisionCount)+" "+str(AggregatePacketCount)+ "\n")





