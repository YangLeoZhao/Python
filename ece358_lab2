import pdb
import numpy
import math
import random
import heapq as heap
from collections import deque

#variable declaration
N = 20 			#N: the number of computers connected to the LAN (variable) 20,40,60,80,100
A = 5 			#Data packets arrive at the MAC layer following a Poisson process with an average arrival rate of A packets /second (variable)
W = 1000000		#The speed of the LAN (fixed)
L = 1500*8   	#Packet length (fixed)
global P
P = 1 			#Persistence parameter for P-persistent CSMA protocols
timeFactor = 1000000000 #Time scale 
simTime =  60 #in seconds
packetperSecond = 0
totalNumberOfPacket = 0
collisionCount = 0
kMax = 10
randomBackoffperiod = 0

packetThroughPut = 0
AggregateCollisionCount = 0
AggregatePacketCount = 0
AggregateErrorCount = 0
AggregateDelayTime = 0

lastPacketTime = 0
currentPacket = 0
lastSender = 0
currentSender = 0


# Presistency = {}
LANUsers = {}
packetHeap = []
collisionList = []

def poissonDistribution(z):
	packetperSecond = float (numpy.random.poisson(z))
	if (packetperSecond == 0):
		return 0
	else:
		return 1/packetperSecond*timeFactor

class users:
	def __init__(self, userID, lastPacket= 0):
		self.userID = userID
		self.queue = deque ()
		self.lastPacket = lastPacket
		self.backoffCounter = 0
		self.medium = 0
		self.mediumCountdown = 96/W*timeFactor

class packet:
	def __init__ (self, packetTime, user, insertTime = 0, deletionTime = 0):
		self.packetTime = packetTime
		self.user = user
		self.insertTime = insertTime
		self.deletionTime = deletionTime

	def __lt__ (self, other):		
		#pdb.set_trace ()
		return self.packetTime < other.packetTime

	def __repr__(self):
		return str(self.packetTime) + " " + str(self.user)

#Resolving collisions
def resolveCollision (collisions, counter):
	for x in range (0, counter+1):
		if(LANUsers[collisions[0].user].backoffCounter < kMax):
			LANUsers[collisions[0].user].backoffCounter += 1
			randomBackoffperiod = random.uniform(0, pow(2,LANUsers[collisions[0].user].backoffCounter)-1)*timeFactor*512/W
			delayPacket = packet (collisions[0].packetTime + randomBackoffperiod, LANUsers[collisions[0].user].userID)
			#print "Random backoff for "+ str(LANUsers[collisions[0].user].userID) +" "+ str(randomBackoffperiod) + " new packet time " + str(delayPacket.packetTime)
			heap.heappush(packetHeap, delayPacket)
			heap.heapify(packetHeap)
		else:
			#print "User: {0} has failed to send a packet at {1}".format (collisions[0].user, collisions[0].packetTime)
			AggregateErrorCount += 1
		collisions.pop(0)

#A value
for z in range (5,8):
	#N value
	for a in range (1,6):
		#each test run 5 times
		for y in range (0,5):
			#Initializing the users
			for x in range (0, a*20+1):
				LANUsers[x] = users (x)
			print "User generation done."

			counter = 0
			#Calculating when the packets from upper layers will arrive
			maxPacketPerUser = 0
			condition = len(LANUsers)
			for x in range (0, len(LANUsers)):
				condition = len(LANUsers)
				while LANUsers[x].lastPacket < (simTime * timeFactor):
					timeBuffer = poissonDistribution(z)
					if (timeBuffer != 0):
						LANUsers[x].lastPacket += timeBuffer
						if (LANUsers[x].lastPacket < (simTime * timeFactor)):
							insertPacket = packet (LANUsers[x].lastPacket, x, LANUsers[x].lastPacket)
							heap.heappush(packetHeap, insertPacket)
							heap.heapify(packetHeap)
							totalNumberOfPacket +=1
							counter +=1
							#print insertPacket.packetTime, insertPacket.user
				counter = 0
			AggregatePacketCount += totalNumberOfPacket
			print "Packet generation done."
			print "Analyzing..."
			#print str(packetHeap)

			#Initialized
			medium = 0
			# Calculating possible collisions
			while (totalNumberOfPacket > 0):
				currentPacket = heap.heappop(packetHeap)
				totalNumberOfPacket -= 1

				#Non-Persistent CSMA/CD
				if (P == 1):
					if (abs(currentPacket.packetTime - lastPacketTime) > (abs(currentSender - lastSender)*10/(2*pow(10,8))) and abs(currentPacket.packetTime - lastPacketTime) < (L*timeFactor/W+ 96*timeFactor/W + abs(currentSender - lastSender)*10/(2*pow(10,8)))):
						#print (str(currentPacket.packetTime) + " " + str(currentPacket.user) + " " + str(lastPacketTime) + " " + str(lastSender))
						currentPacket.packetTime += random.uniform(0, pow(2,LANUsers[currentPacket.user].backoffCounter)-1)*timeFactor*512/W
						heap.heappush(packetHeap, currentPacket)
						heap.heapify(packetHeap)
					else: 
						#A group of collisions
						#print " "+str(currentPacket.packetTime) + " " + str(currentPacket.user)
						if (abs(currentPacket.packetTime - lastPacketTime) <= (L*timeFactor/W+ 96*timeFactor/W + abs(currentSender - lastSender)*10/(2*pow(10,8)))):
							#if the conflicting packets are between the same user then delay the 2nd packet by the minimal busy time
							if(currentPacket.user == lastSender):
								delayCurrentPacket = packet (lastPacketTime + (L*timeFactor/W+ 96*timeFactor/W + abs(currentSender - lastSender)*10/(2*pow(10,8)))+1, currentPacket.user)
								heap.heappush(packetHeap, delayCurrentPacket)
								heap.heapify(packetHeap)
							#if the conflicting packets are between different users
							else:
								if(collisionCount == 0):
									previousPacket = packet (lastPacketTime, lastSender)
									collisionList.append(previousPacket)
								collisionList.append(currentPacket)
								collisionCount += 1
							#print (str(currentPacket.packetTime) + " " + str(currentPacket.user) + " " + str(lastPacketTime) + " " + str(lastSender))
						elif ((abs(currentPacket.packetTime - lastPacketTime) > (L*timeFactor/W+ 96*timeFactor/W + abs(currentSender - lastSender)*10/(2*pow(10,8)))) and collisionCount > 0):
							#print ("Collision occured " + str(collisionCount))
							resolveCollision(collisionList, collisionCount)
							AggregateCollisionCount += collisionCount
							collisionCount = 0
						elif((abs(currentPacket.packetTime - lastPacketTime) > (L*timeFactor/W+ 96*timeFactor/W + abs(currentSender - lastSender)*10/(2*pow(10,8)))) and (currentPacket.packetTime < simTime * timeFactor)):
							LANUsers[currentPacket.user].backoffCounter = 0
							currentPacket.deletionTime = currentPacket.packetTime
							packetThroughPut += 1
							AggregateDelayTime += currentPacket.deletionTime - currentPacket.insertTime
						if (currentPacket.user != lastSender):
							lastPacketTime = currentPacket.packetTime
							lastSender = currentPacket.user

			print " Data packet per second: " +str(z) + " Number of users: " + str(a) + " Packet Throughput: "+str(packetThroughPut) + " Average Delay: "+str(AggregateDelayTime/packetThroughPut) + " Total packet created: " + str (AggregatePacketCount) + " Collision#: " + str(AggregateCollisionCount) + " Errors : " + str(AggregateErrorCount)

			with open ("data.txt", "a") as testfile:
				testfile.write (str(z) + " " + str(a) + " " + str(packetThroughPut) + " " + str(AggregateDelayTime/packetThroughPut) + " " + str(AggregateCollisionCount) + " " + str(AggregatePacketCount)+ "\n")


			LANUsers.clear()
			print "User deletion done."

			packetThroughPut = 0
			AggregateCollisionCount = 0
			AggregatePacketCount = 0
			AggregateErrorCount = 0

			while True:
				try:
					heap.heappop(packetHeap)
				except:
					print "heap empty"
					break





